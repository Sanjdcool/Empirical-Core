{
  "ignored_warnings": [
    {
      "warning_type": "Mass Assignment",
      "warning_code": 70,
      "fingerprint": "0c65aabdc743af40ef19d0591ab0826da78480c9408e8537b487f19144b9f2b4",
      "check_name": "MassAssignment",
      "message": "Parameters should be whitelisted for mass assignment",
      "file": "app/controllers/cms/activity_classifications_controller.rb",
      "line": 46,
      "link": "http://brakemanscanner.org/docs/warning_types/mass_assignment/",
      "code": "params.require(:activity_classification).permit!",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::ActivityClassificationsController",
        "method": "activity_classification_params"
      },
      "user_input": null,
      "confidence": "Medium",
      "note": "This is only staff facing, so we don't need to worry about it."
    },
    {
      "warning_type": "Redirect",
      "warning_code": 18,
      "fingerprint": "2fb7213ca4e369371288fd354472afb686831fc474436791c4912f6b2f6a54d6",
      "check_name": "Redirect",
      "message": "Possible unprotected redirect",
      "file": "app/controllers/pages_controller.rb",
      "line": 40,
      "link": "http://brakemanscanner.org/docs/warning_types/redirect/",
      "code": "redirect_to(Activity.with_classification.find_by_uid(\"-K0rnIIF_iejGqS3XPJ8\").anonymous_module_url.to_s)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "PagesController",
        "method": "play"
      },
      "user_input": "Activity.with_classification.find_by_uid(\"-K0rnIIF_iejGqS3XPJ8\").anonymous_module_url.to_s",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "Redirect",
      "warning_code": 18,
      "fingerprint": "3f3498d581ed83ba3fb6ec8a9ba561768a365a658a38123893d21748cf54ca35",
      "check_name": "Redirect",
      "message": "Possible unprotected redirect",
      "file": "app/controllers/teachers/units_controller.rb",
      "line": 101,
      "link": "http://brakemanscanner.org/docs/warning_types/redirect/",
      "code": "redirect_to(\"/teachers/classroom_activities/#{ActiveRecord::Base.connection.execute(\"\\n      SELECT classroom_activities.id from classroom_activities\\n      \\tLEFT JOIN classrooms ON\\n      \\t\\tclassroom_activities.classroom_id = classrooms.id\\n      \\tWHERE classrooms.teacher_id = #{current_user.id.to_i}\\n      \\t\\tAND classroom_activities.activity_id = #{params[:activity_id].to_i}\\n      \\t\\tAND classroom_activities.visible is TRUE\").to_a.first[\"id\"]}/launch_lesson/#{Activity.find(params[:activity_id].to_i).uid}\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teachers::UnitsController",
        "method": "select_lesson_with_activity_id"
      },
      "user_input": "Activity.find(params[:activity_id].to_i).uid",
      "confidence": "High",
      "note": "This should not cause any issues because we completely control the variables in question here."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "47f178950da4b4b407803c111b3e12c83898238d91eed8ac7022230c07bde826",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/cms/users_controller.rb",
      "line": 228,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n      SELECT\\n      \\tCOUNT(users.id) AS count\\n      FROM users\\n      LEFT JOIN schools_users ON users.id = schools_users.user_id\\n      LEFT JOIN schools ON schools_users.school_id = schools.id\\n      LEFT JOIN user_subscriptions ON users.id = user_subscriptions.user_id\\n      LEFT JOIN subscriptions ON user_subscriptions.subscription_id = subscriptions.id\\n      #{where_query_string_builder}\\n    \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::UsersController",
        "method": "number_of_users_matched"
      },
      "user_input": "where_query_string_builder",
      "confidence": "Medium",
      "note": "This is in the CMS, so no need to worry."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "63e186b1134a4b1d4e2ee05f4ed1cc4248cffa8a2432ae3b00597dd0bddc2f57",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/cms/schools_controller.rb",
      "line": 160,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n      SELECT\\n        schools.name AS school_name,\\n        schools.leanm AS district_name,\\n        COALESCE(schools.city, schools.mail_city) AS school_city,\\n        COALESCE(schools.state, schools.mail_state) AS school_state,\\n        COALESCE(schools.zipcode, schools.mail_zipcode) AS school_zip,\\n        schools.free_lunches || '%' AS frl,\\n        COUNT(DISTINCT schools_users.id) AS number_teachers,\\n        subscriptions.account_type AS premium_status,\\n        COUNT(DISTINCT schools_admins.id) AS number_admins,\\n        schools.id AS id\\n      FROM schools\\n      LEFT JOIN schools_users ON schools_users.school_id = schools.id\\n      LEFT JOIN schools_admins ON schools_admins.school_id = schools.id\\n      LEFT JOIN school_subscriptions ON school_subscriptions.school_id = schools.id\\n      LEFT JOIN subscriptions ON subscriptions.id = school_subscriptions.subscription_id\\n      #{where_query_string_builder}\\n      GROUP BY schools.name, schools.leanm, schools.city, schools.state, schools.zipcode, schools.free_lunches, subscriptions.account_type, schools.id\\n      #{having_string}\\n      #{pagination_query_string}\\n    \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::SchoolsController",
        "method": "school_query"
      },
      "user_input": "where_query_string_builder",
      "confidence": "Medium",
      "note": "This is in the CMS, so no need to worry."
    },
    {
      "warning_type": "Cross-Site Request Forgery",
      "warning_code": 7,
      "fingerprint": "87074659972ebc5f250131619ac95c44d9b4d73ae2dc8b6930de50633f2898c2",
      "check_name": "ForgerySetting",
      "message": "'protect_from_forgery' should be called in Api::ApiController",
      "file": "app/controllers/api/api_controller.rb",
      "line": 1,
      "link": "http://brakemanscanner.org/docs/warning_types/cross-site_request_forgery/",
      "code": null,
      "render_path": null,
      "location": {
        "type": "controller",
        "controller": "Api::ApiController"
      },
      "user_input": null,
      "confidence": "High",
      "note": "This is an API..."
    },
    {
      "warning_type": "Mass Assignment",
      "warning_code": 70,
      "fingerprint": "98c69d29e04c054ad795076081010b159bd38af8163776aee4fd61deb5076f89",
      "check_name": "MassAssignment",
      "message": "Parameters should be whitelisted for mass assignment",
      "file": "app/controllers/teachers/students_controller.rb",
      "line": 67,
      "link": "http://brakemanscanner.org/docs/warning_types/mass_assignment/",
      "code": "params.require(:user).except!(:role).permit!",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teachers::StudentsController",
        "method": "user_params"
      },
      "user_input": null,
      "confidence": "Medium",
      "note": "This is bad. However, the only sensitive data here is the role, which we check for later in the process anyway. I'm excepting it now to be safe, but the rest of this should be fine for now. Leaving it this way is likely bad practice, but it is not as of now a vulnerability."
    },
    {
      "warning_type": "Redirect",
      "warning_code": 18,
      "fingerprint": "af2fe8c8cd095dd58011e8920e6c93919c0a71d90b1c8c5506faf83b901ea74f",
      "check_name": "Redirect",
      "message": "Possible unprotected redirect",
      "file": "app/controllers/activity_sessions_controller.rb",
      "line": 24,
      "link": "http://brakemanscanner.org/docs/warning_types/redirect/",
      "code": "redirect_to(Activity.find(params[:activity_id]).anonymous_module_url.to_s)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ActivitySessionsController",
        "method": "anonymous"
      },
      "user_input": "Activity.find(params[:activity_id]).anonymous_module_url.to_s",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "Mass Assignment",
      "warning_code": 70,
      "fingerprint": "c300ebb7f349759beabe918ca495971a584e172fcc0f5c532ff106354e8905fa",
      "check_name": "MassAssignment",
      "message": "Parameters should be whitelisted for mass assignment",
      "file": "app/controllers/cms/activities_controller.rb",
      "line": 67,
      "link": "http://brakemanscanner.org/docs/warning_types/mass_assignment/",
      "code": "params.require(:activity).permit!",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::ActivitiesController",
        "method": "activity_params"
      },
      "user_input": null,
      "confidence": "Medium",
      "note": "This is only staff facing, so we don't need to worry about it."
    },
    {
      "warning_type": "Redirect",
      "warning_code": 18,
      "fingerprint": "df6575dac5769b63b59d42cde4eeac407a60e36d9a772c284ee97c55c2390163",
      "check_name": "Redirect",
      "message": "Possible unprotected redirect",
      "file": "app/controllers/activity_sessions_controller.rb",
      "line": 23,
      "link": "http://brakemanscanner.org/docs/warning_types/redirect/",
      "code": "redirect_to(\"#{ENV[\"DEFAULT_URL\"]}/preview_lesson/#{Activity.find(params[:activity_id]).uid}\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ActivitySessionsController",
        "method": "anonymous"
      },
      "user_input": "Activity.find(params[:activity_id]).uid",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "e4bb4824d018e765f6594e574f9aa2d7917dcdbced36a18b9bffd8e6dbf37910",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/cms/users_controller.rb",
      "line": 169,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n      SELECT\\n      \\tusers.name AS name,\\n      \\tusers.email AS email,\\n      \\tusers.role AS role,\\n      \\tsubscriptions.account_type AS subscription,\\n      \\tTO_CHAR(users.last_sign_in, 'Mon DD, YYYY') AS last_sign_in,\\n        schools.name AS school,\\n        schools.id AS school_id,\\n      \\tusers.id AS id\\n      FROM users\\n      LEFT JOIN schools_users ON users.id = schools_users.user_id\\n      LEFT JOIN schools ON schools_users.school_id = schools.id\\n      LEFT JOIN user_subscriptions ON users.id = user_subscriptions.user_id\\n      LEFT JOIN subscriptions ON user_subscriptions.subscription_id = subscriptions.id\\n      #{where_query_string_builder}\\n      #{pagination_query_string}\\n    \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::UsersController",
        "method": "user_query"
      },
      "user_input": "where_query_string_builder",
      "confidence": "Medium",
      "note": "This is in the CMS, so no need to worry."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "e771a851b7e8c58da3f19e4fc4bfaaf0189415291dd053e34c33712030ea5754",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/cms/schools_controller.rb",
      "line": 230,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n      SELECT count(*) as count FROM\\n        (SELECT\\n        \\tCOUNT(schools.id) AS count\\n        FROM schools\\n        LEFT JOIN schools_users ON schools_users.school_id = schools.id\\n        LEFT JOIN schools_admins ON schools_admins.school_id = schools.id\\n        LEFT JOIN school_subscriptions ON school_subscriptions.school_id = schools.id\\n        LEFT JOIN subscriptions ON subscriptions.id = school_subscriptions.subscription_id\\n        #{where_query_string_builder}\\n        GROUP BY schools.id\\n        #{having_string}) as subquery\\n    \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::SchoolsController",
        "method": "number_of_schools_matched"
      },
      "user_input": "where_query_string_builder",
      "confidence": "Medium",
      "note": "This is in the CMS, so no need to worry."
    }
  ],
  "updated": "2017-10-20 17:04:49 -0400",
  "brakeman_version": "3.7.2"
}
