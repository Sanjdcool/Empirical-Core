{
  "ignored_warnings": [
    {
      "warning_type": "Mass Assignment",
      "warning_code": 70,
      "fingerprint": "0c65aabdc743af40ef19d0591ab0826da78480c9408e8537b487f19144b9f2b4",
      "check_name": "MassAssignment",
      "message": "Parameters should be whitelisted for mass assignment",
      "file": "app/controllers/cms/activity_classifications_controller.rb",
      "line": 46,
      "link": "http://brakemanscanner.org/docs/warning_types/mass_assignment/",
      "code": "params.require(:activity_classification).permit!",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::ActivityClassificationsController",
        "method": "activity_classification_params"
      },
      "user_input": null,
      "confidence": "Medium",
      "note": "This is only staff facing, so we don't need to worry about it."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "28439ae602d49f4a7d1a902ce4fc6742d9116f2504d8fd510c65cc23bc82207b",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/concerns/teacher.rb",
      "line": 65,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"SELECT coteacher_classroom_invitations.id AS coteacher_classroom_invitation_id, classrooms_teachers.id AS classrooms_teachers_id FROM users\\n      LEFT JOIN invitations ON invitations.invitee_email = users.email AND invitations.archived = false\\n      LEFT JOIN coteacher_classroom_invitations ON coteacher_classroom_invitations.invitation_id = invitations.id #{\"AND coteacher_classroom_invitations.classroom_id IN (#{classrooms_ids_to_check.map(&:to_i).join(\", \")})\"}\\n      LEFT JOIN classrooms_teachers ON classrooms_teachers.user_id = #{self.id} AND classrooms_teachers.role = 'coteacher' #{\"AND classrooms_teachers.classroom_id IN (#{classrooms_ids_to_check.join(\", \")})\"}\\n      WHERE users.id = #{self.id}\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teacher",
        "method": "ids_of_classroom_teachers_and_coteacher_invitations_that_i_coteach_or_am_the_invitee_of"
      },
      "user_input": "classrooms_ids_to_check.map(&:to_i).join(\", \")",
      "confidence": "Medium",
      "note": "Any inputs here are sanitized."
    },
    {
      "warning_type": "Redirect",
      "warning_code": 18,
      "fingerprint": "2fb7213ca4e369371288fd354472afb686831fc474436791c4912f6b2f6a54d6",
      "check_name": "Redirect",
      "message": "Possible unprotected redirect",
      "file": "app/controllers/pages_controller.rb",
      "line": 40,
      "link": "http://brakemanscanner.org/docs/warning_types/redirect/",
      "code": "redirect_to(Activity.with_classification.find_by_uid(\"-K0rnIIF_iejGqS3XPJ8\").anonymous_module_url.to_s)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "PagesController",
        "method": "play"
      },
      "user_input": "Activity.with_classification.find_by_uid(\"-K0rnIIF_iejGqS3XPJ8\").anonymous_module_url.to_s",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "Redirect",
      "warning_code": 18,
      "fingerprint": "4554c0e9c2ccbce6c6698ca0bc6550e931238eea68b7c2888292336fe0436c01",
      "check_name": "Redirect",
      "message": "Possible unprotected redirect",
      "file": "app/controllers/teachers/units_controller.rb",
      "line": 97,
      "link": "http://brakemanscanner.org/docs/warning_types/redirect/",
      "code": "redirect_to(\"/teachers/classroom_activities/#{ActiveRecord::Base.connection.execute(\"\\n      SELECT classroom_activities.id from classroom_activities\\n        LEFT JOIN classrooms_teachers ON classrooms_teachers.classroom_id = classroom_activities.classroom_id\\n        WHERE classrooms_teachers.user_id = #{current_user.id.to_i}\\n          AND classroom_activities.activity_id = #{params[:activity_id].to_i}\\n          AND classroom_activities.visible is TRUE\").to_a.first[\"id\"]}/launch_lesson/#{Activity.find(params[:activity_id].to_i).uid}\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teachers::UnitsController",
        "method": "select_lesson_with_activity_id"
      },
      "user_input": "Activity.find(params[:activity_id].to_i).uid",
      "confidence": "High",
      "note": "False positive. We control ca_id and lesson_uid, and activity_id is an integer, so this should not be problematic."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "47f178950da4b4b407803c111b3e12c83898238d91eed8ac7022230c07bde826",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/cms/users_controller.rb",
      "line": 229,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n      SELECT\\n      \\tCOUNT(users.id) AS count\\n      FROM users\\n      LEFT JOIN schools_users ON users.id = schools_users.user_id\\n      LEFT JOIN schools ON schools_users.school_id = schools.id\\n      LEFT JOIN user_subscriptions ON users.id = user_subscriptions.user_id\\n      LEFT JOIN subscriptions ON user_subscriptions.subscription_id = subscriptions.id\\n      #{where_query_string_builder}\\n    \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::UsersController",
        "method": "number_of_users_matched"
      },
      "user_input": "where_query_string_builder",
      "confidence": "Medium",
      "note": "This is in the CMS, so no need to worry."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "4f586429dcf913b48531e4733ecf061197d4d6a77272c9993e1fba37f79a9f0e",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/concerns/teacher.rb",
      "line": 39,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "Classroom.find_by_sql(\"#{base_sql_for_teacher_classrooms} AND ct.role = 'coteacher'\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teacher",
        "method": "classrooms_i_coteach"
      },
      "user_input": "base_sql_for_teacher_classrooms",
      "confidence": "Medium",
      "note": "base_sql_for_teacher_classrooms is a method that returns the base sql for this query. It is not user generated."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "63e186b1134a4b1d4e2ee05f4ed1cc4248cffa8a2432ae3b00597dd0bddc2f57",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/cms/schools_controller.rb",
      "line": 185,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n      SELECT\\n        schools.name AS school_name,\\n        schools.leanm AS district_name,\\n        COALESCE(schools.city, schools.mail_city) AS school_city,\\n        COALESCE(schools.state, schools.mail_state) AS school_state,\\n        COALESCE(schools.zipcode, schools.mail_zipcode) AS school_zip,\\n        schools.free_lunches || '%' AS frl,\\n        COUNT(DISTINCT schools_users.id) AS number_teachers,\\n        subscriptions.account_type AS premium_status,\\n        COUNT(DISTINCT schools_admins.id) AS number_admins,\\n        schools.id AS id\\n      FROM schools\\n      LEFT JOIN schools_users ON schools_users.school_id = schools.id\\n      LEFT JOIN schools_admins ON schools_admins.school_id = schools.id\\n      LEFT JOIN school_subscriptions ON school_subscriptions.school_id = schools.id\\n      LEFT JOIN subscriptions ON subscriptions.id = school_subscriptions.subscription_id\\n      #{where_query_string_builder}\\n      GROUP BY schools.name, schools.leanm, schools.city, schools.state, schools.zipcode, schools.free_lunches, subscriptions.account_type, schools.id\\n      #{having_string}\\n      #{pagination_query_string}\\n    \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::SchoolsController",
        "method": "school_query"
      },
      "user_input": "where_query_string_builder",
      "confidence": "Medium",
      "note": "This is in the CMS, so no need to worry."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "7fc42c944ffecaa466c482b3482508510e611d002a86016d15d1b1b00e242360",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/concerns/teacher.rb",
      "line": 163,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"SELECT DISTINCT classrooms.name AS name, invitations.invitee_email AS coteacher_email FROM classrooms_teachers AS my_classrooms\\n      JOIN invitations ON invitations.inviter_id = my_classrooms.user_id\\n      JOIN coteacher_classroom_invitations ON invitations.id = coteacher_classroom_invitations.invitation_id\\n      JOIN classrooms ON coteacher_classroom_invitations.classroom_id = classrooms.id\\n      WHERE my_classrooms.user_id = #{self.id} AND invitations.invitation_type = '#{Invitation::TYPES[:coteacher]}' AND invitations.archived = false AND my_classrooms.role = 'owner'\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teacher",
        "method": "classrooms_i_own_that_have_pending_coteacher_invitations"
      },
      "user_input": "Invitation::TYPES[:coteacher]",
      "confidence": "High",
      "note": "All values here are controlled by us."
    },
    {
      "warning_type": "Cross-Site Request Forgery",
      "warning_code": 7,
      "fingerprint": "87074659972ebc5f250131619ac95c44d9b4d73ae2dc8b6930de50633f2898c2",
      "check_name": "ForgerySetting",
      "message": "'protect_from_forgery' should be called in Api::ApiController",
      "file": "app/controllers/api/api_controller.rb",
      "line": 1,
      "link": "http://brakemanscanner.org/docs/warning_types/cross-site_request_forgery/",
      "code": null,
      "render_path": null,
      "location": {
        "type": "controller",
        "controller": "Api::ApiController"
      },
      "user_input": null,
      "confidence": "High",
      "note": "This is an API..."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "987eba4ded8ee9151b02cc136e53b8fc278574a5e2c49e7ff495efde9ff49c50",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/teachers/progress_reports/diagnostic_reports_controller.rb",
      "line": 88,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n        SELECT activity_sessions.state\\n        FROM classrooms_teachers\\n        JOIN classrooms\\n          ON  classrooms_teachers.classroom_id = classrooms.id\\n          AND classrooms.visible = TRUE\\n        JOIN classroom_activities\\n          ON  classrooms.id = classroom_activities.classroom_id\\n          AND classroom_activities.visible = TRUE\\n          AND classroom_activities.activity_id IN (#{[413, 447, 602].join(\", \")})\\n        LEFT JOIN activity_sessions\\n          ON  classroom_activities.id = activity_sessions.classroom_activity_id\\n          AND activity_sessions.state = 'finished'\\n          AND activity_sessions.visible = TRUE\\n        WHERE classrooms_teachers.user_id = #{current_user.id}\\n      \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teachers::ProgressReports::DiagnosticReportsController",
        "method": "diagnostic_status"
      },
      "user_input": "[413, 447, 602].join(\", \")",
      "confidence": "Medium",
      "note": "DIAGNOSTIC_ACTIVITY_IDS is a constant we control, so this is a false positive."
    },
    {
      "warning_type": "Mass Assignment",
      "warning_code": 70,
      "fingerprint": "98c69d29e04c054ad795076081010b159bd38af8163776aee4fd61deb5076f89",
      "check_name": "MassAssignment",
      "message": "Parameters should be whitelisted for mass assignment",
      "file": "app/controllers/teachers/students_controller.rb",
      "line": 69,
      "link": "http://brakemanscanner.org/docs/warning_types/mass_assignment/",
      "code": "params.require(:user).except!(:role).permit!",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teachers::StudentsController",
        "method": "user_params"
      },
      "user_input": null,
      "confidence": "Medium",
      "note": "This is bad. However, the only sensitive data here is the role, which we check for later in the process anyway. I'm excepting it now to be safe, but the rest of this should be fine for now. Leaving it this way is likely bad practice, but it is not as of now a vulnerability."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "aec871567cb38194f1ad7beb11b96133657578eafe63c7260613e91906281dd1",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/concerns/teacher.rb",
      "line": 100,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "Classroom.find_by_sql(\"#{base_sql_for_teacher_classrooms(false)} AND ct.role = 'owner' AND classrooms.visible = false\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teacher",
        "method": "archived_classrooms"
      },
      "user_input": "base_sql_for_teacher_classrooms(false)",
      "confidence": "Medium",
      "note": "base_sql_for_teacher_classrooms is a method that returns the base sql for this query. It is not user generated."
    },
    {
      "warning_type": "Redirect",
      "warning_code": 18,
      "fingerprint": "af2fe8c8cd095dd58011e8920e6c93919c0a71d90b1c8c5506faf83b901ea74f",
      "check_name": "Redirect",
      "message": "Possible unprotected redirect",
      "file": "app/controllers/activity_sessions_controller.rb",
      "line": 30,
      "link": "http://brakemanscanner.org/docs/warning_types/redirect/",
      "code": "redirect_to(Activity.find(params[:activity_id]).anonymous_module_url.to_s)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ActivitySessionsController",
        "method": "anonymous"
      },
      "user_input": "Activity.find(params[:activity_id]).anonymous_module_url.to_s",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "bcb9680bb4e0ee11b784ce73b0d5a82a503cf981e88ae8d86ba03d425f93646c",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/concerns/teacher.rb",
      "line": 35,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "Classroom.find_by_sql(\"#{base_sql_for_teacher_classrooms} AND ct.role = 'owner'\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teacher",
        "method": "classrooms_i_own"
      },
      "user_input": "base_sql_for_teacher_classrooms",
      "confidence": "Medium",
      "note": "base_sql_for_teacher_classrooms is a method that returns the base sql for this query. It is not user generated."
    },
    {
      "warning_type": "Mass Assignment",
      "warning_code": 70,
      "fingerprint": "c300ebb7f349759beabe918ca495971a584e172fcc0f5c532ff106354e8905fa",
      "check_name": "MassAssignment",
      "message": "Parameters should be whitelisted for mass assignment",
      "file": "app/controllers/cms/activities_controller.rb",
      "line": 67,
      "link": "http://brakemanscanner.org/docs/warning_types/mass_assignment/",
      "code": "params.require(:activity).permit!",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::ActivitiesController",
        "method": "activity_params"
      },
      "user_input": null,
      "confidence": "Medium",
      "note": "This is only staff facing, so we don't need to worry about it."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "ceee5a55cb31d579b126eab3213833624281af0dbf08ec83d9e7d1aea1c23b6f",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/teachers/units_controller.rb",
      "line": 220,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"SELECT units.name AS unit_name,\\n         activities.name AS activity_name,\\n         activities.supporting_info AS supporting_info,\\n         classrooms.name AS class_name,\\n         classrooms.id AS classroom_id,\\n         activities.activity_classification_id,\\n         ca.id AS classroom_activity_id,\\n         ca.unit_id AS unit_id,\\n         COALESCE(array_length(ca.assigned_student_ids, 1), 0) AS class_size,\\n         ca.due_date,\\n         activities.id AS activity_id,\\n         activities.uid as activity_uid,\\n         SUM(CASE WHEN act_sesh.state = 'finished' THEN 1 ELSE 0 END) as completed_count,\\n         EXTRACT(EPOCH FROM units.created_at) AS unit_created_at,\\n         EXTRACT(EPOCH FROM ca.created_at) AS classroom_activity_created_at,\\n         '#{own_or_coteach}' AS own_or_coteach,\\n         unit_owner.name AS owner_name\\n      FROM units\\n        INNER JOIN classroom_activities AS ca ON ca.unit_id = units.id\\n        INNER JOIN activities ON ca.activity_id = activities.id\\n        INNER JOIN classrooms ON ca.classroom_id = classrooms.id\\n        LEFT JOIN activity_sessions AS act_sesh ON act_sesh.classroom_activity_id = ca.id\\n        LEFT JOIN classrooms_teachers ON classrooms_teachers.classroom_id = classrooms.id\\n        JOIN users AS unit_owner ON unit_owner.id = units.user_id\\n      WHERE ca.classroom_id IN #{\"(#{current_user.send(\"classrooms_i_#{own_or_coteach}\").map(&:id).join(\", \")})\"}\\n        AND classrooms.visible = true\\n        AND units.visible = true\\n        AND ca.visible = true\\n        GROUP BY units.name, units.created_at, ca.id, classrooms.name, classrooms.id, activities.name, activities.activity_classification_id, activities.id, activities.uid, unit_owner.name\\n        #{(\"HAVING SUM(CASE WHEN act_sesh.visible = true AND act_sesh.state = 'finished' THEN 1 ELSE 0 END) > 0\" or \"\")}\\n        \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teachers::UnitsController",
        "method": "units_i_own_or_coteach"
      },
      "user_input": "own_or_coteach",
      "confidence": "Medium",
      "note": "False positive. own_or_coteach is explicitly set by us."
    },
    {
      "warning_type": "Redirect",
      "warning_code": 18,
      "fingerprint": "df6575dac5769b63b59d42cde4eeac407a60e36d9a772c284ee97c55c2390163",
      "check_name": "Redirect",
      "message": "Possible unprotected redirect",
      "file": "app/controllers/activity_sessions_controller.rb",
      "line": 29,
      "link": "http://brakemanscanner.org/docs/warning_types/redirect/",
      "code": "redirect_to(\"#{ENV[\"DEFAULT_URL\"]}/preview_lesson/#{Activity.find(params[:activity_id]).uid}\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ActivitySessionsController",
        "method": "anonymous"
      },
      "user_input": "Activity.find(params[:activity_id]).uid",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "e3a3333c1d7adea616f243e0f7b61f22f20476b27d7aa8dfa5d79a29295ca435",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/concerns/teacher.rb",
      "line": 216,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "Classroom.find_by_sql(\"#{base_sql_for_teacher_classrooms} AND classrooms.google_classroom_id IS NOT NULL\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Teacher",
        "method": "google_classrooms"
      },
      "user_input": "base_sql_for_teacher_classrooms",
      "confidence": "Medium",
      "note": "base_sql_for_teacher_classrooms is a method that returns the base sql for this query. It is not user generated."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "e4bb4824d018e765f6594e574f9aa2d7917dcdbced36a18b9bffd8e6dbf37910",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/cms/users_controller.rb",
      "line": 170,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n      SELECT\\n      \\tusers.name AS name,\\n      \\tusers.email AS email,\\n      \\tusers.role AS role,\\n      \\tsubscriptions.account_type AS subscription,\\n      \\tTO_CHAR(users.last_sign_in, 'Mon DD, YYYY') AS last_sign_in,\\n        schools.name AS school,\\n        schools.id AS school_id,\\n      \\tusers.id AS id\\n      FROM users\\n      LEFT JOIN schools_users ON users.id = schools_users.user_id\\n      LEFT JOIN schools ON schools_users.school_id = schools.id\\n      LEFT JOIN user_subscriptions ON users.id = user_subscriptions.user_id\\n      LEFT JOIN subscriptions ON user_subscriptions.subscription_id = subscriptions.id\\n      #{where_query_string_builder}\\n      #{pagination_query_string}\\n    \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::UsersController",
        "method": "user_query"
      },
      "user_input": "where_query_string_builder",
      "confidence": "Medium",
      "note": "This is in the CMS, so no need to worry."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "e771a851b7e8c58da3f19e4fc4bfaaf0189415291dd053e34c33712030ea5754",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/cms/schools_controller.rb",
      "line": 255,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n      SELECT count(*) as count FROM\\n        (SELECT\\n        \\tCOUNT(schools.id) AS count\\n        FROM schools\\n        LEFT JOIN schools_users ON schools_users.school_id = schools.id\\n        LEFT JOIN schools_admins ON schools_admins.school_id = schools.id\\n        LEFT JOIN school_subscriptions ON school_subscriptions.school_id = schools.id\\n        LEFT JOIN subscriptions ON subscriptions.id = school_subscriptions.subscription_id\\n        #{where_query_string_builder}\\n        GROUP BY schools.id\\n        #{having_string}) as subquery\\n    \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Cms::SchoolsController",
        "method": "number_of_schools_matched"
      },
      "user_input": "where_query_string_builder",
      "confidence": "Medium",
      "note": "This is in the CMS, so no need to worry."
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "f8f342a2d1d59216f2841e4542b2df8d71fb437b2b1cbee04fb393158062efe8",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/coteacher_classroom_invitations_controller.rb",
      "line": 13,
      "link": "http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"\\n      SELECT coteacher_classroom_invitations.classroom_id, invitations.id AS invitation_id\\n      FROM coteacher_classroom_invitations\\n      INNER JOIN invitations\\n        ON invitations.invitation_type = '#{\"coteacher\"}'\\n        AND invitations.invitee_email = #{ActiveRecord::Base.sanitize(current_user.email)}\\n        AND invitations.archived = false\\n      WHERE coteacher_classroom_invitations.id IN (#{params[:coteacher_invitation_ids].map(&:to_i).join(\", \")})\\n    \")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "CoteacherClassroomInvitationsController",
        "method": "accept_pending_coteacher_invitations"
      },
      "user_input": "params[:coteacher_invitation_ids].map(&:to_i).join(\", \")",
      "confidence": "High",
      "note": "We are explicitly ensuring that these are all integers before continuing."
    }
  ],
  "updated": "2017-12-07 17:19:19 -0500",
  "brakeman_version": "3.7.2"
}
